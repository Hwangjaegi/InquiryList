
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.5.3)

2025-08-13T16:25:05.459+09:00  INFO 37865 --- [inquiry] [           main] didim.inquiry.InquiryApplication         : Starting InquiryApplication v0.0.1-SNAPSHOT using Java 24.0.2 with PID 37865 (/Users/admin/InquiryList/build/libs/inquiry-0.0.1-SNAPSHOT.jar started by root in /Users/admin/InquiryList/build/libs)
2025-08-13T16:25:05.464+09:00  INFO 37865 --- [inquiry] [           main] didim.inquiry.InquiryApplication         : No active profile set, falling back to 1 default profile: "default"
2025-08-13T16:25:07.788+09:00  INFO 37865 --- [inquiry] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-13T16:25:07.947+09:00  INFO 37865 --- [inquiry] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 142 ms. Found 7 JPA repository interfaces.
2025-08-13T16:25:09.290+09:00  INFO 37865 --- [inquiry] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 443 (https)
2025-08-13T16:25:09.324+09:00  INFO 37865 --- [inquiry] [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-08-13T16:25:09.325+09:00  INFO 37865 --- [inquiry] [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-08-13T16:25:09.376+09:00  INFO 37865 --- [inquiry] [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-08-13T16:25:09.378+09:00  INFO 37865 --- [inquiry] [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 3801 ms
2025-08-13T16:25:09.631+09:00  INFO 37865 --- [inquiry] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-13T16:25:09.717+09:00  INFO 37865 --- [inquiry] [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.18.Final
2025-08-13T16:25:09.772+09:00  INFO 37865 --- [inquiry] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-08-13T16:25:10.312+09:00  INFO 37865 --- [inquiry] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-13T16:25:10.366+09:00  INFO 37865 --- [inquiry] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-08-13T16:25:10.666+09:00  INFO 37865 --- [inquiry] [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3d798e76
2025-08-13T16:25:10.668+09:00  INFO 37865 --- [inquiry] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-08-13T16:25:10.727+09:00  WARN 37865 --- [inquiry] [           main] org.hibernate.orm.deprecation            : HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-13T16:25:10.750+09:00  INFO 37865 --- [inquiry] [           main] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0.43
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-13T16:25:12.010+09:00  INFO 37865 --- [inquiry] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-13T16:25:12.124+09:00  INFO 37865 --- [inquiry] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-13T16:25:12.539+09:00  INFO 37865 --- [inquiry] [           main] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-13T16:25:15.980+09:00  WARN 37865 --- [inquiry] [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-08-13T16:25:16.047+09:00  INFO 37865 --- [inquiry] [           main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-08-13T16:25:17.273+09:00  INFO 37865 --- [inquiry] [           main] o.a.t.util.net.NioEndpoint.certificate   : Connector [https-jsse-nio-443], TLS virtual host [_default_], certificate type [UNDEFINED] configured from keystore [/var/root/.keystore] using alias [tomcat] with trust store [null]
2025-08-13T16:25:17.294+09:00  INFO 37865 --- [inquiry] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 443 (https) with context path '/'
2025-08-13T16:25:17.320+09:00  INFO 37865 --- [inquiry] [           main] didim.inquiry.InquiryApplication         : Started InquiryApplication in 12.618 seconds (process running for 13.401)
Hibernate: select c1_0.id from customer c1_0 where c1_0.code=? and c1_0.status=? limit ?
2025-08-13T16:25:17.497+09:00  INFO 37865 --- [inquiry] [           main] d.inquiry.config.DataInitializerConfig   : Customer with code DIDIM already exists, skipping initialization
Hibernate: select u1_0.id from user u1_0 where u1_0.customer_code=? limit ?
2025-08-13T16:25:17.501+09:00  INFO 37865 --- [inquiry] [           main] d.inquiry.config.DataInitializerConfig   : User with customerCode DIDIM and username admin already exists, skipping initialization
2025-08-13T16:25:43.567+09:00  INFO 37865 --- [inquiry] [nio-443-exec-10] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-13T16:25:43.567+09:00  INFO 37865 --- [inquiry] [nio-443-exec-10] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-08-13T16:25:43.569+09:00  INFO 37865 --- [inquiry] [nio-443-exec-10] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
=== JWT 필터 진입 ===
요청 URL: /inquiryList
인증 필요 경로 - JWT 검증 수행: /inquiryList
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /signin
인증 필요 경로 - JWT 검증 수행: /signin
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== CustomUserDetailsService.loadUserByUsername 호출 ===
2. 입력된 usernameWithCustomerCode: admin|didim
파싱된 username: admin
파싱된 customerCode: didim
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0 where c1_0.code=?
파싱된 username , customerCode로 DB조회
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.username=? and u1_0.customer_code=?
DB에서 조회된 사용자: admin
사용자 고객코드: DIDIM
사용자 삭제플래그: false
인증 성공 - CustomUserDetails 생성(User객체) 후 반환 -> JwtAuthController
=== CustomUserDetails.getPassword 호출 ===
반환할 비밀번호: ***
=== JWT 필터 진입 ===
요청 URL: /inquiryList
인증 필요 경로 - JWT 검증 수행: /inquiryList
SecurityContextHolder.getContext().getAuthentication() : UsernamePasswordAuthenticationToken [Principal=didim.inquiry.auth.CustomUserDetails@145ec011, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=211.169.38.70, SessionId=65D1C06AB856A78EA77D2589A9F2AEE7], Granted Authorities=[ADMIN]]
SecurityContextHolder.getContext().getAuthentication().isAuthenticated() : true
인증된 사용자 JWT 검증건너뛰기
=== 디버깅 정보 ===
요청 시간: Wed Aug 13 16:25:50 KST 2025
세션 ID: A321C1571285CD2D342E5542A1CD14A8
요청 URL: https://didim.fmapp.kr/inquiryList
Authentication: UsernamePasswordAuthenticationToken [Principal=didim.inquiry.auth.CustomUserDetails@145ec011, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=211.169.38.70, SessionId=65D1C06AB856A78EA77D2589A9F2AEE7], Granted Authorities=[ADMIN]]
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
SecurityUtil username: admin
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.username=?
2025-08-13T16:25:50.176+09:00  WARN 37865 --- [inquiry] [-nio-443-exec-6] org.hibernate.orm.query                  : HHH90003004: firstResult/maxResults specified with collection fetch; applying in memory
Hibernate: select i1_0.id,a1_0.inquiry_id,a1_0.id,a1_0.content,a1_0.replied_at,u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username,i1_0.content,i1_0.created_at,i1_0.manager_id,i1_0.project_id,i1_0.status,i1_0.tick_number,i1_0.title,i1_0.writer_id from inquiry i1_0 join user w1_0 on w1_0.id=i1_0.writer_id left join answer a1_0 on i1_0.id=a1_0.inquiry_id left join user u1_0 on u1_0.id=a1_0.user_id where (? is null or lower(i1_0.title) like lower(concat('%',?,'%')) escape '') and (? is null or lower(w1_0.name) like lower(concat('%',?,'%')) escape '') and (? is null or i1_0.created_at>=?) and (? is null or i1_0.created_at<=?) and (? is null or i1_0.status in (?,?)) and (? is null or i1_0.project_id=?) order by i1_0.created_at desc
인쿼리콘텐츠 : []
인쿼리개수 : 0
인쿼리비었나 : true
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0
Hibernate: select p1_0.id,p1_0.created_at,p1_0.customer_id,p1_0.subject,p1_0.updated_at from project p1_0 left join customer c1_0 on c1_0.id=p1_0.customer_id where c1_0.id=? order by p1_0.created_at desc
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
=== JWT 필터 진입 ===
요청 URL: /console
인증 필요 경로 - JWT 검증 수행: /console
SecurityContextHolder.getContext().getAuthentication() : UsernamePasswordAuthenticationToken [Principal=didim.inquiry.auth.CustomUserDetails@145ec011, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=211.169.38.70, SessionId=65D1C06AB856A78EA77D2589A9F2AEE7], Granted Authorities=[ADMIN]]
SecurityContextHolder.getContext().getAuthentication().isAuthenticated() : true
인증된 사용자 JWT 검증건너뛰기
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.username=?
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0 order by c1_0.created_at desc limit ?
Hibernate: select count(*) from customer c1_0
Hibernate: select count(c1_0.id) from customer c1_0 where upper(c1_0.status)=upper(?)
Hibernate: select count(c1_0.id) from customer c1_0 where c1_0.created_at between ? and ?
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
=== JWT 필터 진입 ===
요청 URL: /admin/customerList
인증 필요 경로 - JWT 검증 수행: /admin/customerList
SecurityContextHolder.getContext().getAuthentication() : UsernamePasswordAuthenticationToken [Principal=didim.inquiry.auth.CustomUserDetails@145ec011, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=211.169.38.70, SessionId=65D1C06AB856A78EA77D2589A9F2AEE7], Granted Authorities=[ADMIN]]
SecurityContextHolder.getContext().getAuthentication().isAuthenticated() : true
인증된 사용자 JWT 검증건너뛰기
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.username=?
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.id<>? and u1_0.customer_code in (select c1_0.code from customer c1_0 where c1_0.status='ACTIVE') order by u1_0.id desc limit ?
Hibernate: select count(*) from user u1_0
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0 where c1_0.code in (?,?) and c1_0.status=?
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
=== JWT 필터 진입 ===
요청 URL: /admin/customerList
인증 필요 경로 - JWT 검증 수행: /admin/customerList
SecurityContextHolder.getContext().getAuthentication() : UsernamePasswordAuthenticationToken [Principal=didim.inquiry.auth.CustomUserDetails@145ec011, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=211.169.38.70, SessionId=65D1C06AB856A78EA77D2589A9F2AEE7], Granted Authorities=[ADMIN]]
SecurityContextHolder.getContext().getAuthentication().isAuthenticated() : true
인증된 사용자 JWT 검증건너뛰기
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.username=?
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.id<>? order by u1_0.id desc limit ?
Hibernate: select count(*) from user u1_0
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0 where c1_0.code in (?,?,?) and c1_0.status=?
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
=== JWT 필터 진입 ===
요청 URL: /admin/customerList
인증 필요 경로 - JWT 검증 수행: /admin/customerList
SecurityContextHolder.getContext().getAuthentication() : UsernamePasswordAuthenticationToken [Principal=didim.inquiry.auth.CustomUserDetails@145ec011, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=211.169.38.70, SessionId=65D1C06AB856A78EA77D2589A9F2AEE7], Granted Authorities=[ADMIN]]
SecurityContextHolder.getContext().getAuthentication().isAuthenticated() : true
인증된 사용자 JWT 검증건너뛰기
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.username=?
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.id<>? and u1_0.customer_code in (select c1_0.code from customer c1_0 where c1_0.status='ACTIVE') order by u1_0.id desc limit ?
Hibernate: select count(*) from user u1_0
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0 where c1_0.code in (?,?) and c1_0.status=?
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
=== JWT 필터 진입 ===
요청 URL: /admin/projectListAdmin
인증 필요 경로 - JWT 검증 수행: /admin/projectListAdmin
SecurityContextHolder.getContext().getAuthentication() : UsernamePasswordAuthenticationToken [Principal=didim.inquiry.auth.CustomUserDetails@145ec011, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=211.169.38.70, SessionId=65D1C06AB856A78EA77D2589A9F2AEE7], Granted Authorities=[ADMIN]]
SecurityContextHolder.getContext().getAuthentication().isAuthenticated() : true
인증된 사용자 JWT 검증건너뛰기
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.username=?
Hibernate: select p1_0.id,p1_0.created_at,p1_0.customer_id,p1_0.subject,p1_0.updated_at from project p1_0 left join customer c1_0 on c1_0.id=p1_0.customer_id where c1_0.status='ACTIVE' order by p1_0.created_at desc,p1_0.created_at desc limit ?
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0 where c1_0.status=?
Hibernate: select count(p1_0.id) from project p1_0
Hibernate: select count(p1_0.id) from project p1_0 where p1_0.created_at>=?
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0 where c1_0.code in (?) and c1_0.status=?
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
=== JWT 필터 진입 ===
요청 URL: /admin/projectListAdmin
인증 필요 경로 - JWT 검증 수행: /admin/projectListAdmin
SecurityContextHolder.getContext().getAuthentication() : UsernamePasswordAuthenticationToken [Principal=didim.inquiry.auth.CustomUserDetails@145ec011, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=211.169.38.70, SessionId=65D1C06AB856A78EA77D2589A9F2AEE7], Granted Authorities=[ADMIN]]
SecurityContextHolder.getContext().getAuthentication().isAuthenticated() : true
인증된 사용자 JWT 검증건너뛰기
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.username=?
Hibernate: select p1_0.id,p1_0.created_at,p1_0.customer_id,p1_0.subject,p1_0.updated_at from project p1_0 order by p1_0.created_at desc,p1_0.created_at desc limit ?
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0 where c1_0.status=?
Hibernate: select count(p1_0.id) from project p1_0
Hibernate: select count(p1_0.id) from project p1_0 where p1_0.created_at>=?
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0 where c1_0.id=?
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0 where c1_0.code in (?,?) and c1_0.status=?
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
=== JWT 필터 진입 ===
요청 URL: /admin/projectListAdmin
인증 필요 경로 - JWT 검증 수행: /admin/projectListAdmin
SecurityContextHolder.getContext().getAuthentication() : UsernamePasswordAuthenticationToken [Principal=didim.inquiry.auth.CustomUserDetails@145ec011, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=211.169.38.70, SessionId=65D1C06AB856A78EA77D2589A9F2AEE7], Granted Authorities=[ADMIN]]
SecurityContextHolder.getContext().getAuthentication().isAuthenticated() : true
인증된 사용자 JWT 검증건너뛰기
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.username=?
Hibernate: select p1_0.id,p1_0.created_at,p1_0.customer_id,p1_0.subject,p1_0.updated_at from project p1_0 left join customer c1_0 on c1_0.id=p1_0.customer_id where c1_0.status='ACTIVE' order by p1_0.created_at desc,p1_0.created_at desc limit ?
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0 where c1_0.status=?
Hibernate: select count(p1_0.id) from project p1_0
Hibernate: select count(p1_0.id) from project p1_0 where p1_0.created_at>=?
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0 where c1_0.code in (?) and c1_0.status=?
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
=== JWT 필터 진입 ===
요청 URL: /myInfo
인증 필요 경로 - JWT 검증 수행: /myInfo
SecurityContextHolder.getContext().getAuthentication() : UsernamePasswordAuthenticationToken [Principal=didim.inquiry.auth.CustomUserDetails@145ec011, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=211.169.38.70, SessionId=65D1C06AB856A78EA77D2589A9F2AEE7], Granted Authorities=[ADMIN]]
SecurityContextHolder.getContext().getAuthentication().isAuthenticated() : true
인증된 사용자 JWT 검증건너뛰기
요청전달
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.username=?
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
=== JWT 필터 진입 ===
요청 URL: /inquiryList
인증 필요 경로 - JWT 검증 수행: /inquiryList
SecurityContextHolder.getContext().getAuthentication() : UsernamePasswordAuthenticationToken [Principal=didim.inquiry.auth.CustomUserDetails@145ec011, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=211.169.38.70, SessionId=65D1C06AB856A78EA77D2589A9F2AEE7], Granted Authorities=[ADMIN]]
SecurityContextHolder.getContext().getAuthentication().isAuthenticated() : true
인증된 사용자 JWT 검증건너뛰기
=== 디버깅 정보 ===
요청 시간: Wed Aug 13 16:25:59 KST 2025
세션 ID: A321C1571285CD2D342E5542A1CD14A8
요청 URL: https://didim.fmapp.kr/inquiryList
Authentication: UsernamePasswordAuthenticationToken [Principal=didim.inquiry.auth.CustomUserDetails@145ec011, Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=211.169.38.70, SessionId=65D1C06AB856A78EA77D2589A9F2AEE7], Granted Authorities=[ADMIN]]
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
SecurityUtil username: admin
Hibernate: select u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username from user u1_0 where u1_0.username=?
2025-08-13T16:25:59.532+09:00  WARN 37865 --- [inquiry] [-nio-443-exec-6] org.hibernate.orm.query                  : HHH90003004: firstResult/maxResults specified with collection fetch; applying in memory
Hibernate: select i1_0.id,a1_0.inquiry_id,a1_0.id,a1_0.content,a1_0.replied_at,u1_0.id,u1_0.created_at,u1_0.customer_code,u1_0.delete_flag,u1_0.email,u1_0.name,u1_0.password,u1_0.role,u1_0.tel,u1_0.updated_at,u1_0.username,i1_0.content,i1_0.created_at,i1_0.manager_id,i1_0.project_id,i1_0.status,i1_0.tick_number,i1_0.title,i1_0.writer_id from inquiry i1_0 join user w1_0 on w1_0.id=i1_0.writer_id left join answer a1_0 on i1_0.id=a1_0.inquiry_id left join user u1_0 on u1_0.id=a1_0.user_id where (? is null or lower(i1_0.title) like lower(concat('%',?,'%')) escape '') and (? is null or lower(w1_0.name) like lower(concat('%',?,'%')) escape '') and (? is null or i1_0.created_at>=?) and (? is null or i1_0.created_at<=?) and (? is null or i1_0.status in (?,?)) and (? is null or i1_0.project_id=?) order by i1_0.created_at desc
인쿼리콘텐츠 : []
인쿼리개수 : 0
인쿼리비었나 : true
Hibernate: select c1_0.id,c1_0.code,c1_0.company,c1_0.created_at,c1_0.status,c1_0.updated_at from customer c1_0
Hibernate: select p1_0.id,p1_0.created_at,p1_0.customer_id,p1_0.subject,p1_0.updated_at from project p1_0 left join customer c1_0 on c1_0.id=p1_0.customer_id where c1_0.id=? order by p1_0.created_at desc
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
=== CustomUserDetails.getUsername 호출 ===
반환할 사용자명: admin
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /.git/index
인증 필요 경로 - JWT 검증 수행: /.git/index
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
2025-08-13T19:57:29.017+09:00  WARN 37865 --- [inquiry] [l-1:housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Retrograde clock change detected (housekeeper delta=27s704ms), soft-evicting connections from pool.
=== JWT 필터 진입 ===
요청 URL: /dns-query
인증 필요 경로 - JWT 검증 수행: /dns-query
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /.git/config
인증 필요 경로 - JWT 검증 수행: /.git/config
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /robots.txt
인증 필요 경로 - JWT 검증 수행: /robots.txt
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /ecp/Current/exporttool/microsoft.exchange.ediscovery.exporttool.application
인증 필요 경로 - JWT 검증 수행: /ecp/Current/exporttool/microsoft.exchange.ediscovery.exporttool.application
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
2025-08-14T00:23:36.548+09:00  WARN 37865 --- [inquiry] [l-1:housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Retrograde clock change detected (housekeeper delta=27s895ms), soft-evicting connections from pool.
=== JWT 필터 진입 ===
요청 URL: /.env
인증 필요 경로 - JWT 검증 수행: /.env
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /.git/config
인증 필요 경로 - JWT 검증 수행: /.git/config
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
2025-08-14T01:38:55.407+09:00  WARN 37865 --- [inquiry] [l-1:housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Retrograde clock change detected (housekeeper delta=28s7ms), soft-evicting connections from pool.
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /favicon.ico
인증 필요 경로 - JWT 검증 수행: /favicon.ico
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /api/v2/static/not.found
인증 필요 경로 - JWT 검증 수행: /api/v2/static/not.found
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /api/v2/static/not.found
인증 필요 경로 - JWT 검증 수행: /api/v2/static/not.found
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /remote/logincheck
인증 필요 경로 - JWT 검증 수행: /remote/logincheck
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /remote/logincheck
인증 필요 경로 - JWT 검증 수행: /remote/logincheck
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /fonts/ftnt-icons.woff
인증 필요 경로 - JWT 검증 수행: /fonts/ftnt-icons.woff
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /fonts/ftnt-icons.woff
인증 필요 경로 - JWT 검증 수행: /fonts/ftnt-icons.woff
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /lang/custom/sbin/init
인증 필요 경로 - JWT 검증 수행: /lang/custom/sbin/init
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /lang/custom/sbin/init
인증 필요 경로 - JWT 검증 수행: /lang/custom/sbin/init
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /static/lang/custom/sbin/init
인증 필요 경로 - JWT 검증 수행: /static/lang/custom/sbin/init
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /static/lang/custom/sbin/init
인증 필요 경로 - JWT 검증 수행: /static/lang/custom/sbin/init
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /lang/legacy/filechecksum
인증 필요 경로 - JWT 검증 수행: /lang/legacy/filechecksum
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /lang/legacy/filechecksum
인증 필요 경로 - JWT 검증 수행: /lang/legacy/filechecksum
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /migadmin/lang/legacy/legacy/filechecksum
인증 필요 경로 - JWT 검증 수행: /migadmin/lang/legacy/legacy/filechecksum
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /migadmin/lang/legacy/legacy/filechecksum
인증 필요 경로 - JWT 검증 수행: /migadmin/lang/legacy/legacy/filechecksum
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /geoserver/web/
인증 필요 경로 - JWT 검증 수행: /geoserver/web/
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
2025-08-14T04:21:53.978+09:00  WARN 37865 --- [inquiry] [-nio-443-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' is not supported]
=== JWT 필터 진입 ===
요청 URL: /.env
인증 필요 경로 - JWT 검증 수행: /.env
=== JWT 필터 진입 ===
요청 URL: /laravel.log
/login 요청 시 토큰 정보 확인 불가능
인증 필요 경로 - JWT 검증 수행: /laravel.log
헤더 쿠키 파라미터 -> Filter JWT : null
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /src/.env
인증 필요 경로 - JWT 검증 수행: /src/.env
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /backend/.env
인증 필요 경로 - JWT 검증 수행: /backend/.env
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /storage/logs/laravel.log
인증 필요 경로 - JWT 검증 수행: /storage/logs/laravel.log
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /jemboedqyuda123456789
인증 필요 경로 - JWT 검증 수행: /jemboedqyuda123456789
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /logs/laravel.log
인증 필요 경로 - JWT 검증 수행: /logs/laravel.log
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /laravel/.env
인증 필요 경로 - JWT 검증 수행: /laravel/.env
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /api/jemboedqyuda123456789
인증 필요 경로 - JWT 검증 수행: /api/jemboedqyuda123456789
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /log/laravel.log
인증 필요 경로 - JWT 검증 수행: /log/laravel.log
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /www/.env
=== JWT 필터 진입 ===
요청 URL: /storage/logs/app.log
인증 필요 경로 - JWT 검증 수행: /storage/logs/app.log
인증 필요 경로 - JWT 검증 수행: /www/.env
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /api/.env
인증 필요 경로 - JWT 검증 수행: /api/.env
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /app/.env
인증 필요 경로 - JWT 검증 수행: /app/.env
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /index.php/nonexistentroute
인증 필요 경로 - JWT 검증 수행: /index.php/nonexistentroute
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /phpinfo
인증 필요 경로 - JWT 검증 수행: /phpinfo
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /phpinfo.php
인증 필요 경로 - JWT 검증 수행: /phpinfo.php
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /i.php
인증 필요 경로 - JWT 검증 수행: /i.php
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /app/Http/Controllers/does-not-exist
인증 필요 경로 - JWT 검증 수행: /app/Http/Controllers/does-not-exist
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /info
인증 필요 경로 - JWT 검증 수행: /info
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /app_dev.php/_profiler/phpinfo
인증 필요 경로 - JWT 검증 수행: /app_dev.php/_profiler/phpinfo
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /vendor/composer/installed.json
인증 필요 경로 - JWT 검증 수행: /vendor/composer/installed.json
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /info.php
인증 필요 경로 - JWT 검증 수행: /info.php
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /php_info
인증 필요 경로 - JWT 검증 수행: /php_info
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /_ignition/execute-solution
인증 필요 경로 - JWT 검증 수행: /_ignition/execute-solution
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /_profiler/phpinfo
인증 필요 경로 - JWT 검증 수행: /_profiler/phpinfo
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /config.php
인증 필요 경로 - JWT 검증 수행: /config.php
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /index.php/_ignition/execute-solution
인증 필요 경로 - JWT 검증 수행: /index.php/_ignition/execute-solution
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /debug/default/view
인증 필요 경로 - JWT 검증 수행: /debug/default/view
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /.env
인증 필요 경로 - JWT 검증 수행: /.env
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /app/.env.token
인증 필요 경로 - JWT 검증 수행: /app/.env.token
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /api/.env_1.bak
인증 필요 경로 - JWT 검증 수행: /api/.env_1.bak
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /ci/config/.env
인증 필요 경로 - JWT 검증 수행: /ci/config/.env
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /@fs/.env
인증 필요 경로 - JWT 검증 수행: /@fs/.env
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /.git/config
인증 필요 경로 - JWT 검증 수행: /.git/config
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /ab2g
인증 필요 경로 - JWT 검증 수행: /ab2g
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /ab2h
인증 필요 경로 - JWT 검증 수행: /ab2h
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /alive.php
인증 필요 경로 - JWT 검증 수행: /alive.php
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /teorema505
인증 필요 경로 - JWT 검증 수행: /teorema505
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /.env
인증 필요 경로 - JWT 검증 수행: /.env
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /login
공개 경로 - JWT 검증 건너뛰기: /login
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
=== JWT 필터 진입 ===
요청 URL: /
인증 필요 경로 - JWT 검증 수행: /
/login 요청 시 토큰 정보 확인 불가능
헤더 쿠키 파라미터 -> Filter JWT : null
2025-08-14T11:12:25.688+09:00  INFO 37865 --- [inquiry] [ionShutdownHook] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2025-08-14T11:12:25.767+09:00  INFO 37865 --- [inquiry] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2025-08-14T11:12:25.821+09:00  INFO 37865 --- [inquiry] [ionShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-14T11:12:25.875+09:00  INFO 37865 --- [inquiry] [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2025-08-14T11:12:25.956+09:00  INFO 37865 --- [inquiry] [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
